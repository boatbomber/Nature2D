"use strict";(self.webpackChunknature_2_d_docs=self.webpackChunknature_2_d_docs||[]).push([[470],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),d=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return i.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(n),m=a,h=u["".concat(s,".").concat(m)]||u[m]||p[m]||r;return n?i.createElement(h,o(o({ref:t},c),{},{components:n})):i.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var d=2;d<r;d++)o[d]=n[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2042:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return c},default:function(){return u}});var i=n(7462),a=n(3366),r=(n(7294),n(3905)),o=["components"],l={sidebar_position:4},s="Constraint",d={unversionedId:"api/Constraint",id:"api/Constraint",isDocsHomePage:!1,title:"Constraint",description:"Constraints keep two points together in place and maintain uniform distance between the two. Constraints and Points together join to keep a RigidBody in place hence making both Points and Constraints a vital part of the library. Custom constraints such as Ropes, Rods, Bridges and chains can also be made. Points of two rigid bodies can be connected with constraints, two individual points can also be connected with constraints to form Ropes etc.",source:"@site/docs/api/Constraint.md",sourceDirName:"api",slug:"/api/Constraint",permalink:"/Nature2D/docs/api/Constraint",editUrl:"https://github.com/jaipack17/Nature2D/edit/master/docs/docs/api/Constraint.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Point",permalink:"/Nature2D/docs/api/Point"}},c=[{value:"Types",id:"types",children:[],level:2},{value:"Functions",id:"functions",children:[{value:"<code>Constraint.new()</code>",id:"constraintnew",children:[],level:3},{value:"<code>Constraint:Constrain()</code>",id:"constraintconstrain",children:[],level:3},{value:"<code>Constraint:Render()</code>",id:"constraintrender",children:[],level:3},{value:"<code>Constraint:SetLength()</code>",id:"constraintsetlength",children:[],level:3},{value:"<code>Constraint:SetSpringConstant()</code>",id:"constraintsetspringconstant",children:[],level:3},{value:"<code>Constraint:Stroke()</code>",id:"constraintstroke",children:[],level:3},{value:"<code>Constraint:Destroy()</code>",id:"constraintdestroy",children:[],level:3}],level:2},{value:"Fetch Methods",id:"fetch-methods",children:[{value:"<code>Constraint:GetPoints()</code>",id:"constraintgetpoints",children:[],level:3},{value:"<code>Constraint:GetFrame()</code>",id:"constraintgetframe",children:[],level:3},{value:"<code>Constraint:GetLength()</code>",id:"constraintgetlength",children:[],level:3},{value:"<code>Constraint:GetId()</code>",id:"constraintgetid",children:[],level:3},{value:"<code>Constraint:GetParent()</code>",id:"constraintgetparent",children:[],level:3}],level:2},{value:"Properties",id:"properties",children:[{value:"Visible <code>boolean</code>",id:"visible-boolean",children:[],level:3},{value:"Thickness <code>number</code>",id:"thickness-number",children:[],level:3},{value:"RestLength <code>number</code>",id:"restlength-number",children:[],level:3},{value:"SpringConstant <code>number</code>",id:"springconstant-number",children:[],level:3},{value:"Color <code>Color3</code>",id:"color-color3",children:[],level:3}],level:2}],p={toc:c};function u(e){var t=e.components,n=(0,a.Z)(e,o);return(0,r.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"constraint"},"Constraint"),(0,r.kt)("p",null,"Constraints keep two points together in place and maintain uniform distance between the two. Constraints and Points together join to keep a RigidBody in place hence making both Points and Constraints a vital part of the library. Custom constraints such as Ropes, Rods, Bridges and chains can also be made. Points of two rigid bodies can be connected with constraints, two individual points can also be connected with constraints to form Ropes etc."),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),(0,r.kt)("strong",{parentName:"h5"},"NOTE:"))),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Constraints are handled by the Engine by default. Constraints are created for RigidBodies on creation. This class should only be used to create custom constraints."),(0,r.kt)("p",{parentName:"div"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"Engine:Create()")," to create custom constraints!"))),(0,r.kt)("h2",{id:"types"},"Types"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"type Canvas = {\n    topLeft: Vector2,\n    size: Vector2,\n    frame: Frame\n}\n\ntype SegmentConfig = {  \n    restLength: number?, \n    render: boolean, \n    thickness: number,\n    support: boolean\n}\n")),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"constraintnew"},(0,r.kt)("inlineCode",{parentName:"h3"},"Constraint.new()")),(0,r.kt)("p",null,"This method is used to initialize a constraint."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"parameters - ",(0,r.kt)("inlineCode",{parentName:"li"},"type: string, p1: Point, p2: Point, canvas: Canvas, config: SegmentConfig")),(0,r.kt)("li",{parentName:"ul"},"returns - ",(0,r.kt)("inlineCode",{parentName:"li"},"Constraint"))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"constraintconstrain"},(0,r.kt)("inlineCode",{parentName:"h3"},"Constraint:Constrain()")),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE:")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"This method is automatically handled by the engine!"))),(0,r.kt)("p",null,"This method is used to keep uniform distance between the constraint's points, i.e. constrain."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"parameters - ",(0,r.kt)("inlineCode",{parentName:"li"},"none")),(0,r.kt)("li",{parentName:"ul"},"returns - ",(0,r.kt)("inlineCode",{parentName:"li"},"nil"))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"constraintrender"},(0,r.kt)("inlineCode",{parentName:"h3"},"Constraint:Render()")),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE:")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"This method is automatically handled by the engine!"))),(0,r.kt)("p",null,"This method is used to update the position and appearance of the constraint on screen."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"parameters - ",(0,r.kt)("inlineCode",{parentName:"li"},"none")),(0,r.kt)("li",{parentName:"ul"},"returns - ",(0,r.kt)("inlineCode",{parentName:"li"},"nil"))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"constraintsetlength"},(0,r.kt)("inlineCode",{parentName:"h3"},"Constraint:SetLength()")),(0,r.kt)("p",null,"Used to set the minimum constrained distance between two points. By default, the initial distance between the two points."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"parameters - ",(0,r.kt)("inlineCode",{parentName:"li"},"newLength: number")),(0,r.kt)("li",{parentName:"ul"},"returns - ",(0,r.kt)("inlineCode",{parentName:"li"},"nil"))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"constraintsetspringconstant"},(0,r.kt)("inlineCode",{parentName:"h3"},"Constraint:SetSpringConstant()")),(0,r.kt)("p",null,"This method is used to update the Spring constant (by default 0.1) used for spring constraint calculations."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"parameters - ",(0,r.kt)("inlineCode",{parentName:"li"},"k: number")),(0,r.kt)("li",{parentName:"ul"},"returns - ",(0,r.kt)("inlineCode",{parentName:"li"},"nil"))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"constraintstroke"},(0,r.kt)("inlineCode",{parentName:"h3"},"Constraint:Stroke()")),(0,r.kt)("p",null,"This method is used to change the color of a constraint. By default a constraint's color is set to the default value of (WHITE) Color3.new(1, 1, 1)."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"parameters - ",(0,r.kt)("inlineCode",{parentName:"li"},"color: Color3")),(0,r.kt)("li",{parentName:"ul"},"returns - ",(0,r.kt)("inlineCode",{parentName:"li"},"nil"))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"constraintdestroy"},(0,r.kt)("inlineCode",{parentName:"h3"},"Constraint:Destroy()")),(0,r.kt)("p",null,"This method destroys the constraint. Its UI element is no longer rendered on screen and the constraint is removed from the engine. This is irreversible."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"parameters - ",(0,r.kt)("inlineCode",{parentName:"li"},"none")),(0,r.kt)("li",{parentName:"ul"},"returns - ",(0,r.kt)("inlineCode",{parentName:"li"},"nil"))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"fetch-methods"},"Fetch Methods"),(0,r.kt)("h3",{id:"constraintgetpoints"},(0,r.kt)("inlineCode",{parentName:"h3"},"Constraint:GetPoints()")),(0,r.kt)("p",null,"Returns the constraints points."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"parameters - ",(0,r.kt)("inlineCode",{parentName:"li"},"none")),(0,r.kt)("li",{parentName:"ul"},"returns - ",(0,r.kt)("inlineCode",{parentName:"li"},"point1: Point, point2: Point"))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"constraintgetframe"},(0,r.kt)("inlineCode",{parentName:"h3"},"Constraint:GetFrame()")),(0,r.kt)("p",null,"Returns the UI element for the constrained IF rendered."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"parameters - ",(0,r.kt)("inlineCode",{parentName:"li"},"none")),(0,r.kt)("li",{parentName:"ul"},"returns - ",(0,r.kt)("inlineCode",{parentName:"li"},"frame: Frame"))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"constraintgetlength"},(0,r.kt)("inlineCode",{parentName:"h3"},"Constraint:GetLength()")),(0,r.kt)("p",null,"This method returns the current distance between the two points of a constraint."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"parameters - ",(0,r.kt)("inlineCode",{parentName:"li"},"none")),(0,r.kt)("li",{parentName:"ul"},"returns - ",(0,r.kt)("inlineCode",{parentName:"li"},"distance: number"))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"constraintgetid"},(0,r.kt)("inlineCode",{parentName:"h3"},"Constraint:GetId()")),(0,r.kt)("p",null,"The constraints's unique ID can be fetched using this method."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"parameters - ",(0,r.kt)("inlineCode",{parentName:"li"},"none")),(0,r.kt)("li",{parentName:"ul"},"returns - ",(0,r.kt)("inlineCode",{parentName:"li"},"id: string"))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"constraintgetparent"},(0,r.kt)("inlineCode",{parentName:"h3"},"Constraint:GetParent()")),(0,r.kt)("p",null,"Returns the Parent (RigidBody) of the Constraint if any."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"parameters - none"),(0,r.kt)("li",{parentName:"ul"},"return - parent: RigidBody | nil")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("h3",null,"Type ",(0,r.kt)("code",null,"string")," ",(0,r.kt)("code",null,(0,r.kt)("font",{color:"#ff5252"},"(must-have)"))),(0,r.kt)("p",null,"It refers to the kind of constraint. It can be Spring, Rod or Rope."),(0,r.kt)("h3",null,"Point1 ",(0,r.kt)("code",null,"Point")," ",(0,r.kt)("code",null,(0,r.kt)("font",{color:"#ff5252"},"(must-have)"))),(0,r.kt)("p",null,"Refers to one of the points connected by the constraint."),(0,r.kt)("h3",null,"Point2 ",(0,r.kt)("code",null,"Point")," ",(0,r.kt)("code",null,(0,r.kt)("font",{color:"#ff5252"},"(must-have)"))),(0,r.kt)("p",null,"Refers to one of the points connected by the constraint."),(0,r.kt)("h3",{id:"visible-boolean"},"Visible ",(0,r.kt)("inlineCode",{parentName:"h3"},"boolean")),(0,r.kt)("p",null,"Whether or not the constraint is visible/being rendered on screen. "),(0,r.kt)("h3",{id:"thickness-number"},"Thickness ",(0,r.kt)("inlineCode",{parentName:"h3"},"number")),(0,r.kt)("p",null,"The thickness of the constraint. ",(0,r.kt)("inlineCode",{parentName:"p"},"Size.Y")," of the constraint's frame."),(0,r.kt)("h3",{id:"restlength-number"},"RestLength ",(0,r.kt)("inlineCode",{parentName:"h3"},"number")),(0,r.kt)("p",null,"The minimum or maximum constrained distance between two points. "),(0,r.kt)("h3",{id:"springconstant-number"},"SpringConstant ",(0,r.kt)("inlineCode",{parentName:"h3"},"number")),(0,r.kt)("p",null,"The k (spring) constant marking the stiffness of the constraint."),(0,r.kt)("h3",{id:"color-color3"},"Color ",(0,r.kt)("inlineCode",{parentName:"h3"},"Color3")),(0,r.kt)("p",null,"The BackgroundColor or ImageColor of the constraint's frame."))}u.isMDXComponent=!0}}]);