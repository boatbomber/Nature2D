"use strict";(self.webpackChunknature_2_d_docs=self.webpackChunknature_2_d_docs||[]).push([[553],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return h}});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=o.createContext({}),s=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=s(e.components);return o.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),p=s(t),h=a,g=p["".concat(l,".").concat(h)]||p[h]||u[h]||i;return t?o.createElement(g,r(r({ref:n},c),{},{components:t})):o.createElement(g,r({ref:n},c))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=p;var d={};for(var l in n)hasOwnProperty.call(n,l)&&(d[l]=n[l]);d.originalType=e,d.mdxType="string"==typeof e?e:a,r[1]=d;for(var s=2;s<i;s++)r[s]=t[s];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},7425:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return d},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return c},default:function(){return p}});var o=t(7462),a=t(3366),i=(t(7294),t(3905)),r=["components"],d={sidebar_position:6},l="Handling Events",s={unversionedId:"tutorial-basics/Handling Events",id:"tutorial-basics/Handling Events",isDocsHomePage:!1,title:"Handling Events",description:"Events are a small part of Nature2D that come to a lot of use. They make a lot of things easier to handle without polling or other bad practices. As of now there are 8 available events. 5 for the Engine and 3 for RigidBodies. Let's have a look at them and how you can use them in your code.",source:"@site/docs/tutorial-basics/Handling Events.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/Handling Events",permalink:"/Nature2D/docs/tutorial-basics/Handling Events",editUrl:"https://github.com/jaipack17/Nature2D/edit/master/docs/docs/tutorial-basics/Handling Events.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Creating Custom Constraints",permalink:"/Nature2D/docs/tutorial-basics/Custom Constraints"},next:{title:"Collision Filtering",permalink:"/Nature2D/docs/tutorial-basics/Collision Filtering"}},c=[],u={toc:c};function p(e){var n=e.components,t=(0,a.Z)(e,r);return(0,i.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"handling-events"},"Handling Events"),(0,i.kt)("p",null,"Events are a small part of Nature2D that come to a lot of use. They make a lot of things easier to handle without polling or other bad practices. As of now there are 8 available events. 5 for the Engine and 3 for RigidBodies. Let's have a look at them and how you can use them in your code."),(0,i.kt)("p",null,"Let's start with the Touched and CanvasEdgeTouched events for RigidBodies! ",(0,i.kt)("inlineCode",{parentName:"p"},"RigidBody.Touched")," fires the moment a RigidBody is touching another RigidBody. Similarly ",(0,i.kt)("inlineCode",{parentName:"p"},"RigidBody.CanvasEdgeTouched")," fires if the RigidBody is touching any edge of the canvas (Top, Left, Right and Bottom). The Touched event returns the unique ID of the RigidBody while the CanvasEdgeTouched event returns the name of the edge the RigidBody collided with. The ",(0,i.kt)("inlineCode",{parentName:"p"},"RigidBody.TouchEnded")," event fires the moment two RigidBodies stop colliding with each other. This event also returns the id of the other RigidBody."),(0,i.kt)("p",null,"Take in account that CanvasEdgeTouched event only fires if RigidBody.KeepInCanvas is set to true. Let's take this example. Suppose you have a kill part. If a RigidBody touches this killpart, the rigidbody is destroyed!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local killPart = Engine:Create("RigidBody", {\n    Object = KillPartObjectHere,\n    Collidable = true,\n    Anchored = true\n})\n\nkillPart.Touched:Connect(function(id)\n    local body = Engine:GetBodyById(id)\n\n    if body then \n       body:Destroy()\n    end\nend)\n\nkillPart.TouchEnded:Connect(function(id)\n    print("Touch ended!")\nend)\n')),(0,i.kt)("p",null,"Similarly, let's take another example. Say you want to change the color of the RigidBody object if it collides with the left edge of the canvas. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local body = Engine:Create("RigidBody", {\n    Object = BodyObject,\n    Collidable = true,\n    Anchored = false\n})\n\nbody.CanvasEdgeTouched:Connect(function(edgeName)\n    if edgeName == "Left" then \n       body:GetFrame().BackgroundColor3 = Color3.new(1, 0, 0) -- red\n    end \nend)\n')),(0,i.kt)("p",null,"That is all for RigidBody events! Now for the events of the Engine."),(0,i.kt)("p",null,"The first two events we'll be taking a look at are ",(0,i.kt)("inlineCode",{parentName:"p"},"Engine.Started")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Engine.Stopped"),". These events fire when you call Engine:Start() and Engine:Stop(). Say you wish to display if the engine is running or not on a textlabel on the user's screen."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local Engine = Nature2D.init(screenGuiInstance)\n\nlocal Label = Instance.new("TextLabel")\nLabel.AnchorPoint = Vector2.new(0.5, 0.5)\nLabel.Position = UDim2.fromScale(0.5, 0.5)\nLabel.Parent = screenGuiInstance\n\nEngine.Started:Connect(function()\n    Label.Text = "Engine is Running"\nend)\n\nEngine.Stopped:Connect(function()\n    Label.Text = "Engine is not Running"\nend)\n')),(0,i.kt)("p",null,"There are two more events for the Engine. ",(0,i.kt)("inlineCode",{parentName:"p"},"Engine.ObjectAdded")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Engine.ObjectRemoved"),"! They are similar to how ",(0,i.kt)("inlineCode",{parentName:"p"},"Instance.ChildAdded")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Instance.ChildRemoved")," work. Whenever a RigidBody, Point or Constraint is added using the ",(0,i.kt)("inlineCode",{parentName:"p"},":Create()")," method, the ObjectAdded event is called and also returns the object added. When a RigidBody or Constraint is destroyed, ObjectRemoved event is called and it also returns the object removed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'Engine.ObjectAdded:Connect(function(object)\n    print(object:GetId())\nend)\n\nEngine.ObjectRemoved:Connect(function(object)\n    print(object:GetId())\nend)\n\nlocal newBody = Engine:Create("RigidBody", {\n    Object = SomeInstance,\n    Collidable = false,\n    Anchored = false,\n    Friction = 0.03\n}) -- ObjectAdded is fired\n\nnewBody:Destroy() -- ObjectRemoved is fired\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Engine.Updated")," fires each frame. It fires the moment all physics objects have been updated and rendered on screen."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"Engine.Updated:Connect(function()\n    -- do something\nend)\n")))}p.isMDXComponent=!0}}]);