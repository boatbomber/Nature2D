"use strict";(self.webpackChunknature_2_d_docs=self.webpackChunknature_2_d_docs||[]).push([[495],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return g}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(n),g=o,f=p["".concat(c,".").concat(g)]||p[g]||d[g]||i;return n?r.createElement(f,a(a({ref:t},l),{},{components:n})):r.createElement(f,a({ref:t},l))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6552:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return l},default:function(){return p}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],s={sidebar_position:9},c=void 0,u={unversionedId:"tutorial-basics/Creating Custom RigidBodies",id:"tutorial-basics/Creating Custom RigidBodies",isDocsHomePage:!1,title:"Creating Custom RigidBodies",description:"You can now create more than just rectangles and squares. You can now define your own point-constraint structures like triangles, irregular quadrilaterals and n-sided polygons and then turn them into RigidBodies! Here's how Custom RigidBodies work and how you can create your own!",source:"@site/docs/tutorial-basics/Creating Custom RigidBodies.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/Creating Custom RigidBodies",permalink:"/Nature2D/docs/tutorial-basics/Creating Custom RigidBodies",editUrl:"https://github.com/jaipack17/Nature2D/edit/master/docs/docs/tutorial-basics/Creating Custom RigidBodies.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"RigidBody State Management",permalink:"/Nature2D/docs/tutorial-basics/RigidBody State Management"},next:{title:"Using Nature2D Plugins",permalink:"/Nature2D/docs/tutorial-basics/Using Nature2D Plugins"}},l=[],d={toc:l};function p(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"You can now create more than just rectangles and squares. You can now define your own point-constraint structures like triangles, irregular quadrilaterals and n-sided polygons and then turn them into RigidBodies! Here's how Custom RigidBodies work and how you can create your own!"),(0,i.kt)("img",{src:"https://doy2mn9upadnk.cloudfront.net/uploads/default/original/4X/6/c/0/6c083977de6abf1d77e90a9fec5b1e0d267d6724.png"}),(0,i.kt)("p",null,'In the above image, the green dots are the arbitrary points we chose for our RigidBody, if we pass in a UI element, the 4 dots are automatically placed at its corners, also keeping in mind its rotation. There are 6 lines connecting the points all together. The lines in black are the edges of the RigidBody and the lines in red are "support constraints" which are meant to hold the RigidBody\'s structure in place and it prevent it from collapsing into nothingness. It is worth noting that support constraints are ',(0,i.kt)("strong",{parentName:"p"},"not")," used in collision detection. All constraints are rods."),(0,i.kt)("p",null,"In order to create custom RigidBodies, you don't need to specify a UI element/Object when using ",(0,i.kt)("inlineCode",{parentName:"p"},"Engine:Create()"),'. You would pass in a property called "Structure". This contains a table of constraint data. Here\'s how a structure looks like for a rectangle:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"-- { Point1: Vector2, Point2: Vector2, Support: boolean }\n\nlocal struct = {\n    { Vector2.new(0, 0), Vector2.new(0, 10) },\n    { Vector2.new(0, 10), Vector2.new(10, 10) },\n    { Vector2.new(10, 10), Vector2.new(10, 0) },\n    { Vector2.new(10, 0), Vector2.new(0, 0) },\n    { Vector2.new(0, 0), Vector2.new(10, 10), true },\n    { Vector2.new(10, 0), Vector2.new(0, 10), true }\n}\n")),(0,i.kt)("p",null,"You just need to provide the positions of the points of the edges and specify if they are support constraints or not! Note that in order to create custom rigidbodies, you ",(0,i.kt)("strong",{parentName:"p"},"must")," specify a frame for the Engine's Canvas. You can then use ",(0,i.kt)("inlineCode",{parentName:"p"},"Engine:Create()")," to turn this structure into a RigidBody. A simple example of a triangle:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local viewport = workspace.CurrentCamera.ViewportSize\n\nlocal function MakeTriangle(a: Vector2, b: Vector2, c: Vector2)\n    return {\n        { a, b, false }, \n        { a, c, false }, \n        { b, c, false }\n    }\nend\n\nlocal triangle = Engine:Create("RigidBody", {\n    Structure = MakeTriangle(viewport/2, viewport/2 + Vector2.new(-40, 80), viewport/2 + Vector2.new(40, 80)),\n    Collidable = true,\n    Anchored = false\n})\n')),(0,i.kt)("p",null,"Custom RigidBodies also support Quadtree collision detection! It is worth noting that not all methods will work for custom RigidBodies since the idea is fairly new."))}p.isMDXComponent=!0}}]);