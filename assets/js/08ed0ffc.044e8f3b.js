"use strict";(self.webpackChunknature_2_d_docs=self.webpackChunknature_2_d_docs||[]).push([[519],{3905:function(e,t,i){i.d(t,{Zo:function(){return u},kt:function(){return f}});var n=i(7294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function l(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function a(e,t){if(null==e)return{};var i,n,r=function(e,t){if(null==e)return{};var i,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):l(l({},t),e)),i},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var i=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=c(i),f=r,h=p["".concat(s,".").concat(f)]||p[f]||d[f]||o;return i?n.createElement(h,l(l({ref:t},u),{},{components:i})):n.createElement(h,l({ref:t},u))}));function f(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=i.length,l=new Array(o);l[0]=p;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:r,l[1]=a;for(var c=2;c<o;c++)l[c]=i[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,i)}p.displayName="MDXCreateElement"},2002:function(e,t,i){i.r(t),i.d(t,{frontMatter:function(){return a},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return p}});var n=i(7462),r=i(3366),o=(i(7294),i(3905)),l=["components"],a={sidebar_position:7},s="Collision Filtering",c={unversionedId:"tutorial-basics/Collision Filtering",id:"tutorial-basics/Collision Filtering",isDocsHomePage:!1,title:"Collision Filtering",description:"Collision filtering is a very important aspect of any physics engine. Nature2D has everything you need to filter collisions between RigidBodies. Here's a video that illustrates the same. You can see that only the RigidBodies in red color are able to pass through the entry, while blue ones are not!",source:"@site/docs/tutorial-basics/Collision Filtering.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/Collision Filtering",permalink:"/Nature2D/docs/tutorial-basics/Collision Filtering",editUrl:"https://github.com/jaipack17/Nature2D/edit/master/docs/docs/tutorial-basics/Collision Filtering.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Handling Events",permalink:"/Nature2D/docs/tutorial-basics/Handling Events"},next:{title:"RigidBody State Management",permalink:"/Nature2D/docs/tutorial-basics/RigidBody State Management"}},u=[],d={toc:u};function p(e){var t=e.components,i=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,n.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"collision-filtering"},"Collision Filtering"),(0,o.kt)("p",null,"Collision filtering is a very important aspect of any physics engine. Nature2D has everything you need to filter collisions between RigidBodies. Here's a video that illustrates the same. You can see that only the RigidBodies in red color are able to pass through the entry, while blue ones are not!"),(0,o.kt)("iframe",{width:"675",height:"400",src:"https://user-images.githubusercontent.com/74130881/144749871-45c53b1e-1e48-4630-9e5f-82338954fc9e.mp4",frameborder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0}),(0,o.kt)("p",null,"In order to choose which RigidBodies collide with whom. We use methods such as ",(0,o.kt)("inlineCode",{parentName:"p"},"RigidBody:FilterCollisionsWith(body: RigidBody)"),". "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'local Red = Engine:Create("RigidBody", {\n    Object = RedObject,\n    Collidable = true,\n    Anchored = false\n})\n\nlocal Blue1 = Engine:Create("RigidBody", {\n    Object = BlueObject,\n    Collidable = true,\n    Anchored = false\n})\n\nlocal Blue2 = Blue1:Clone()\n\nRed:FilterCollisionsWith(Blue1)\nRed:FilterCollisionsWith(Blue2)\n')),(0,o.kt)("p",null,"In the above code snippet, we declare that Red shall not collide with any blue RigidBodies, while the blue RigidBodies can still collide with each other!"),(0,o.kt)("p",null,"In order to make Red collide with Blue1 and Blue2 again, we use ",(0,o.kt)("inlineCode",{parentName:"p"},"RigidBody:UnfilterCollisionsWith()"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"Red:UnfilterCollisionsWith(Blue1)\nRed:UnfilterCollisionsWith(Blue2)\n")),(0,o.kt)("p",null,"If you ever lose track of which RigidBodies a body is not asked to collide with, use ",(0,o.kt)("inlineCode",{parentName:"p"},"RigidBody:GetFilteredRigidBodies()"),"! This method returns an array of all RigidBodies the body is not allowed to collide with."))}p.isMDXComponent=!0}}]);