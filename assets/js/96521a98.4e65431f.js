"use strict";(self.webpackChunknature_2_d_docs=self.webpackChunknature_2_d_docs||[]).push([[562],{3905:function(e,i,t){t.d(i,{Zo:function(){return u},kt:function(){return p}});var n=t(7294);function a(e,i,t){return i in e?Object.defineProperty(e,i,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[i]=t,e}function d(e,i){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);i&&(n=n.filter((function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var i=1;i<arguments.length;i++){var t=null!=arguments[i]?arguments[i]:{};i%2?d(Object(t),!0).forEach((function(i){a(e,i,t[i])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):d(Object(t)).forEach((function(i){Object.defineProperty(e,i,Object.getOwnPropertyDescriptor(t,i))}))}return e}function l(e,i){if(null==e)return{};var t,n,a=function(e,i){if(null==e)return{};var t,n,a={},d=Object.keys(e);for(n=0;n<d.length;n++)t=d[n],i.indexOf(t)>=0||(a[t]=e[t]);return a}(e,i);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);for(n=0;n<d.length;n++)t=d[n],i.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var r=n.createContext({}),s=function(e){var i=n.useContext(r),t=i;return e&&(t="function"==typeof e?e(i):o(o({},i),e)),t},u=function(e){var i=s(e.components);return n.createElement(r.Provider,{value:i},e.children)},m={inlineCode:"code",wrapper:function(e){var i=e.children;return n.createElement(n.Fragment,{},i)}},h=n.forwardRef((function(e,i){var t=e.components,a=e.mdxType,d=e.originalType,r=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),h=s(t),p=a,c=h["".concat(r,".").concat(p)]||h[p]||m[p]||d;return t?n.createElement(c,o(o({ref:i},u),{},{components:t})):n.createElement(c,o({ref:i},u))}));function p(e,i){var t=arguments,a=i&&i.mdxType;if("string"==typeof e||a){var d=t.length,o=new Array(d);o[0]=h;var l={};for(var r in i)hasOwnProperty.call(i,r)&&(l[r]=i[r]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<d;s++)o[s]=t[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}h.displayName="MDXCreateElement"},730:function(e,i,t){t.r(i),t.d(i,{frontMatter:function(){return l},contentTitle:function(){return r},metadata:function(){return s},toc:function(){return u},default:function(){return h}});var n=t(7462),a=t(3366),d=(t(7294),t(3905)),o=["components"],l={sidebar_position:2},r="RigidBody",s={unversionedId:"api/RigidBody",id:"api/RigidBody",isDocsHomePage:!1,title:"RigidBody",description:"RigidBodies are formed by Constraints, Points and UI Elements.",source:"@site/docs/api/RigidBody.md",sourceDirName:"api",slug:"/api/RigidBody",permalink:"/Nature2D/docs/api/RigidBody",editUrl:"https://github.com/jaipack17/Nature2D/edit/master/docs/docs/api/RigidBody.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Engine",permalink:"/Nature2D/docs/api/Engine"},next:{title:"Point",permalink:"/Nature2D/docs/api/Point"}},u=[{value:"Types",id:"types",children:[],level:2},{value:"Functions",id:"functions",children:[{value:"<code>RigidBody.new()</code>",id:"rigidbodynew",children:[],level:3},{value:"<code>RigidBody:CreateProjection()</code>",id:"rigidbodycreateprojection",children:[],level:3},{value:"<code>RigidBody:DetectCollision()</code>",id:"rigidbodydetectcollision",children:[],level:3},{value:"<code>RigidBody:ApplyForce()</code>",id:"rigidbodyapplyforce",children:[],level:3},{value:"<code>RigidBody:Update()</code>",id:"rigidbodyupdate",children:[],level:3},{value:"<code>RigidBody:Render()</code>",id:"rigidbodyrender",children:[],level:3},{value:"<code>RigidBody:Clone()</code>",id:"rigidbodyclone",children:[],level:3},{value:"<code>RigidBody:Destroy()</code>",id:"rigidbodydestroy",children:[],level:3},{value:"<code>RigidBody:Rotate()</code>",id:"rigidbodyrotate",children:[],level:3},{value:"<code>RigidBody:SetPosition()</code>",id:"rigidbodysetposition",children:[],level:3},{value:"<code>RigidBody:SetSize()</code>",id:"rigidbodysetsize",children:[],level:3},{value:"<code>RigidBody:Anchor()</code>",id:"rigidbodyanchor",children:[],level:3},{value:"<code>RigidBody:Unanchor()</code>",id:"rigidbodyunanchor",children:[],level:3},{value:"<code>RigidBody:CanCollide()</code>",id:"rigidbodycancollide",children:[],level:3},{value:"<code>RigidBody:SetLifeSpan()</code>",id:"rigidbodysetlifespan",children:[],level:3},{value:"<code>RigidBody:KeepInCanvas()</code>",id:"rigidbodykeepincanvas",children:[],level:3},{value:"<code>RigidBody:SetFriction()</code>",id:"rigidbodysetfriction",children:[],level:3},{value:"<code>RigidBody:SetAirFriction()</code>",id:"rigidbodysetairfriction",children:[],level:3},{value:"<code>RigidBody:SetGravity()</code>",id:"rigidbodysetgravity",children:[],level:3},{value:"<code>RigidBody:SetMaxForce()</code>",id:"rigidbodysetmaxforce",children:[],level:3},{value:"<code>RigidBody:SetMass()</code>",id:"rigidbodysetmass",children:[],level:3},{value:"<code>RigidBody:SetState()</code>",id:"rigidbodysetstate",children:[],level:3},{value:"<code>RigidBody:FilterCollisionsWith()</code>",id:"rigidbodyfiltercollisionswith",children:[],level:3},{value:"<code>RigidBody:UnfilterCollisionsWith()</code>",id:"rigidbodyunfiltercollisionswith",children:[],level:3}],level:2},{value:"Fetch Methods",id:"fetch-methods",children:[{value:"<code>RigidBody:GetFrame()</code>",id:"rigidbodygetframe",children:[],level:3},{value:"<code>RigidBody:GetId()</code>",id:"rigidbodygetid",children:[],level:3},{value:"<code>RigidBody:GetVertices()</code>",id:"rigidbodygetvertices",children:[],level:3},{value:"<code>RigidBody:GetConstraints()</code>",id:"rigidbodygetconstraints",children:[],level:3},{value:"<code>RigidBody:IsInBounds()</code>",id:"rigidbodyisinbounds",children:[],level:3},{value:"<code>RigidBody:AverageVelocity()</code>",id:"rigidbodyaveragevelocity",children:[],level:3},{value:"<code>RigidBody:GetState()</code>",id:"rigidbodygetstate",children:[],level:3},{value:"<code>RigidBody:GetCenter()</code>",id:"rigidbodygetcenter",children:[],level:3},{value:"<code>RigidBody:GetFilteredRigidBodies()</code>",id:"rigidbodygetfilteredrigidbodies",children:[],level:3},{value:"<code>RigidBody:GetTouchingRigidBodies()</code>",id:"rigidbodygettouchingrigidbodies",children:[],level:3}],level:2},{value:"Events",id:"events",children:[{value:"<code>RigidBody.Touched</code>",id:"rigidbodytouched",children:[],level:3},{value:"<code>RigidBody.TouchEnded</code>",id:"rigidbodytouchended",children:[],level:3},{value:"<code>RigidBody.CanvasEdgeTouched</code>",id:"rigidbodycanvasedgetouched",children:[],level:3}],level:2},{value:"Properties",id:"properties",children:[{value:"Object <code>GuiObject</code>",id:"object-guiobject",children:[],level:3},{value:"Structure <code>RigidBodyStructure</code>",id:"structure-rigidbodystructure",children:[],level:3},{value:"Mass <code>number</code>",id:"mass-number",children:[],level:3},{value:"Collidable <code>boolean</code>",id:"collidable-boolean",children:[],level:3},{value:"Anchored <code>boolean</code>",id:"anchored-boolean",children:[],level:3},{value:"LifeSpan <code>number</code>",id:"lifespan-number",children:[],level:3},{value:"KeepInCanvas <code>boolean</code>",id:"keepincanvas-boolean",children:[],level:3},{value:"Gravity <code>Vector2</code>",id:"gravity-vector2",children:[],level:3},{value:"Friction <code>number</code>",id:"friction-number",children:[],level:3},{value:"AirFriction <code>number</code>",id:"airfriction-number",children:[],level:3}],level:2}],m={toc:u};function h(e){var i=e.components,t=(0,a.Z)(e,o);return(0,d.kt)("wrapper",(0,n.Z)({},m,t,{components:i,mdxType:"MDXLayout"}),(0,d.kt)("h1",{id:"rigidbody"},"RigidBody"),(0,d.kt)("p",null,"RigidBodies are formed by Constraints, Points and UI Elements."),(0,d.kt)("h2",{id:"types"},"Types"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-lua"},"type Collision: {\n    axis: Vector2,\n    depth: number,\n    edge: Constraint,\n    vertex: Point,\n}\n\ntype RigidBodyStructure: {\n    -- { Point1: Point, Point2: Point, support: boolean }\n    { any }\n    ...\n}\n")),(0,d.kt)("h2",{id:"functions"},"Functions"),(0,d.kt)("h3",{id:"rigidbodynew"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody.new()")),(0,d.kt)("p",null,"This method is used to initialize a new RigidBody."),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"frame: GuiObject, collidable: boolean, anchored: boolean, engine: Engine")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"RigidBody"))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodycreateprojection"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody:CreateProjection()")),(0,d.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,d.kt)("div",{parentName:"div",className:"admonition-heading"},(0,d.kt)("h5",{parentName:"div"},(0,d.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,d.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,d.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE:")),(0,d.kt)("div",{parentName:"div",className:"admonition-content"},(0,d.kt)("p",{parentName:"div"},"This method is automatically handled by the engine!"))),(0,d.kt)("p",null,"This method projects the RigidBody on an axis. Used for collision detection."),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"axis: Vector2, min, max")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"min: number, max: number"))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodydetectcollision"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody:DetectCollision()")),(0,d.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,d.kt)("div",{parentName:"div",className:"admonition-heading"},(0,d.kt)("h5",{parentName:"div"},(0,d.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,d.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,d.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE:")),(0,d.kt)("div",{parentName:"div",className:"admonition-content"},(0,d.kt)("p",{parentName:"div"},"This method is automatically handled by the engine!"))),(0,d.kt)("p",null,"This method detects collision between two RigidBodies."),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"body: RigidBody")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"{ colliding: boolean, collision: Collision }"))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodyapplyforce"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody:ApplyForce()")),(0,d.kt)("p",null,"This method is used to apply an external force on the rigid body. The time parameter can be passed in the function to apply the force for a certain time period."),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"force: Vector2, time: number | nil")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"nil"))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodyupdate"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody:Update()")),(0,d.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,d.kt)("div",{parentName:"div",className:"admonition-heading"},(0,d.kt)("h5",{parentName:"div"},(0,d.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,d.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,d.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE:")),(0,d.kt)("div",{parentName:"div",className:"admonition-content"},(0,d.kt)("p",{parentName:"div"},"This method is automatically handled by the engine!"))),(0,d.kt)("p",null,"This method updates the positions of the RigidBody's points and constraints."),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"dt: number")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"nil"))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodyrender"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody:Render()")),(0,d.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,d.kt)("div",{parentName:"div",className:"admonition-heading"},(0,d.kt)("h5",{parentName:"div"},(0,d.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,d.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,d.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE:")),(0,d.kt)("div",{parentName:"div",className:"admonition-content"},(0,d.kt)("p",{parentName:"div"},"This method is automatically handled by the engine!"))),(0,d.kt)("p",null,"This method updates the positions and appearance of the RigidBody on screen."),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"none")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"nil"))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodyclone"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody:Clone()")),(0,d.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,d.kt)("div",{parentName:"div",className:"admonition-heading"},(0,d.kt)("h5",{parentName:"div"},(0,d.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,d.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,d.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),(0,d.kt)("strong",{parentName:"h5"},"NOTE:"))),(0,d.kt)("div",{parentName:"div",className:"admonition-content"},(0,d.kt)("p",{parentName:"div"},"This method is restricted for ",(0,d.kt)("a",{parentName:"p",href:"https://jaipack17.github.io/Nature2D/docs/tutorial-basics/Creating%20Custom%20RigidBodies"},"Custom RigidBodies"),"."))),(0,d.kt)("p",null,"This method is used to clone and already existing RigidBody. By default the clone won't inherit the original RigidBody's states, lifespan or filtered RigidBodies. In order to copy those too, pass in the deepCopy parameter as true."),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"deepCopy: boolean | nil")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"clone: RigidBody"))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodydestroy"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody:Destroy()")),(0,d.kt)("p",null,"This method is used to destroy the RigidBody. The body's UI element is destroyed if keepFrame is false or nil and its connections are disconnected and the body is removed from the engine."),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"keepFrame: boolean | nil")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"nil"))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodyrotate"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody:Rotate()")),(0,d.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,d.kt)("div",{parentName:"div",className:"admonition-heading"},(0,d.kt)("h5",{parentName:"div"},(0,d.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,d.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,d.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),(0,d.kt)("strong",{parentName:"h5"},"NOTE:"))),(0,d.kt)("div",{parentName:"div",className:"admonition-content"},(0,d.kt)("p",{parentName:"div"},"This method is restricted for ",(0,d.kt)("a",{parentName:"p",href:"https://jaipack17.github.io/Nature2D/docs/tutorial-basics/Creating%20Custom%20RigidBodies"},"Custom RigidBodies"),"."))),(0,d.kt)("p",null,"This method is used to rotate the RigidBody's UI element. After rotation the positions of its points and constraints are automatically updated."),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"newRotation: number")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"oldRotation: number, newRotation: number"))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodysetposition"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody:SetPosition()")),(0,d.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,d.kt)("div",{parentName:"div",className:"admonition-heading"},(0,d.kt)("h5",{parentName:"div"},(0,d.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,d.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,d.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),(0,d.kt)("strong",{parentName:"h5"},"NOTE:"))),(0,d.kt)("div",{parentName:"div",className:"admonition-content"},(0,d.kt)("p",{parentName:"div"},"This method is restricted for ",(0,d.kt)("a",{parentName:"p",href:"https://jaipack17.github.io/Nature2D/docs/tutorial-basics/Creating%20Custom%20RigidBodies"},"Custom RigidBodies"),"."))),(0,d.kt)("p",null,"This method is used to set a new position of the RigidBody's UI element. After updating the position, the positions of its points and constraints are automatically updated."),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"PositionX: number, PositionX: number")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"oldPosition: UDim2, newPosition: UDim2"))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodysetsize"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody:SetSize()")),(0,d.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,d.kt)("div",{parentName:"div",className:"admonition-heading"},(0,d.kt)("h5",{parentName:"div"},(0,d.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,d.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,d.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),(0,d.kt)("strong",{parentName:"h5"},"NOTE:"))),(0,d.kt)("div",{parentName:"div",className:"admonition-content"},(0,d.kt)("p",{parentName:"div"},"This method is restricted for ",(0,d.kt)("a",{parentName:"p",href:"https://jaipack17.github.io/Nature2D/docs/tutorial-basics/Creating%20Custom%20RigidBodies"},"Custom RigidBodies"),"."))),(0,d.kt)("p",null,"This method is used to set a new size of the RigidBody's UI element. After updating the size, the positions of its points and constraints are automatically updated."),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"SizeX: number, SizeY: number")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"oldSize: UDim2, newSize: UDim2"))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodyanchor"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody:Anchor()")),(0,d.kt)("p",null,"This method is used to anchor the RigidBody. Its position will no longer change. It will still be able to collide with other RigidBodies. It will act the same as an anchored BasePart. Rotate(), SetPosition() and SetSize() can still be called."),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"none")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"nil"))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodyunanchor"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody:Unanchor()")),(0,d.kt)("p",null,"This method is used to unachor and anchored RigidBody."),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"none")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"nil"))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodycancollide"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody:CanCollide()")),(0,d.kt)("p",null,"This method is used to determine whether the RigidBody will collide with other RigidBodies. If set to false, collision detection and response will be skipped. Similar to how BasePart.CanCollide functions."),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"collidable: boolean")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"nil"))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodysetlifespan"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody:SetLifeSpan()")),(0,d.kt)("p",null,"This method is used to set the RigidBody's life span. Life span is determined by 'seconds'. After this time in seconds has been passed after the RigidBody is created, the RigidBody is automatically destroyed and removed from the engine."),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"seconds: number")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"nil"))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodykeepincanvas"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody:KeepInCanvas()")),(0,d.kt)("p",null,"This method determines if the RigidBody stays inside the engine's canvas at all times. If set to false, the RigidBody will be able to go past the engine's canvas (boundaries)."),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"keepInCanvas: boolean")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"nil"))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodysetfriction"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody:SetFriction()")),(0,d.kt)("p",null,"This method sets a custom frictional damp value just for the RigidBody. The RigidBody no longer abides by the engine's universal friction."),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"friction: number")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"nil"))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodysetairfriction"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody:SetAirFriction()")),(0,d.kt)("p",null,"This method sets a custom air frictional damp value just for the RigidBody. The RigidBody no longer abides by the engine's universal friction."),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"airfriction: number")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"nil"))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodysetgravity"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody:SetGravity()")),(0,d.kt)("p",null,"This method sets a custom gravitational force just for the RigidBody. The RigidBody no longer abides by the engine's universal gravity."),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"gravity: Vector2")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"nil"))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodysetmaxforce"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody:SetMaxForce()")),(0,d.kt)("p",null,"Determines the max force that can be applied to the RigidBody."),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"maxForce: number")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"nil"))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodysetmass"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody:SetMass()")),(0,d.kt)("p",null,"This method sets the mass for the RigidBody. By default mass is set to 1."),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"mass: number")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"nil"))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodysetstate"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody:SetState()")),(0,d.kt)("p",null,"Used to initialize or update states of a RigidBody"),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"state: string, value: any")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"nil"))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodyfiltercollisionswith"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody:FilterCollisionsWith()")),(0,d.kt)("p",null,"Used to ignore/filter any collisions with the other RigidBody."),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"otherRigidBody: RigidBody")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"nil"))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodyunfiltercollisionswith"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody:UnfilterCollisionsWith()")),(0,d.kt)("p",null,"Used to unfilter collisions with the other RigidBody. The two bodies will now collide with each other."),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"otherRigidBody: RigidBody")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"nil"))),(0,d.kt)("hr",null),(0,d.kt)("h2",{id:"fetch-methods"},"Fetch Methods"),(0,d.kt)("h3",{id:"rigidbodygetframe"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody:GetFrame()")),(0,d.kt)("p",null,"The RigidBody's UI Element can be fetched using this method."),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"none")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"UIElement: GuiObject"))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodygetid"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody:GetId()")),(0,d.kt)("p",null,"The RigidBody's unique ID can be fetched using this method."),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"none")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"id: string"))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodygetvertices"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody:GetVertices()")),(0,d.kt)("p",null,"The RigidBody's Points can be fetched using this method."),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"none")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"points: table"))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodygetconstraints"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody:GetConstraints()")),(0,d.kt)("p",null,"The RigidBody's Constraints can be fetched using this method."),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"none")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"constraints: table"))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodyisinbounds"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody:IsInBounds()")),(0,d.kt)("p",null,"Returns true if the RigidBody lies within the boundaries of the canvas, else false."),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"none")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"isInBounds: boolean"))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodyaveragevelocity"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody:AverageVelocity()")),(0,d.kt)("p",null,"Returns the average of all the velocities of the RigidBody's points."),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"none")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"velocity: Vector2"))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodygetstate"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody:GetState()")),(0,d.kt)("p",null,"Used to fetch a state"),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"state: string")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"value: any"))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodygetcenter"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody:GetCenter()")),(0,d.kt)("p",null,"Used to fetch the center position of the RigidBody"),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"none")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"center: Vector2"))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodygetfilteredrigidbodies"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody:GetFilteredRigidBodies()")),(0,d.kt)("p",null,"Returns all filtered RigidBodies."),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"none")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"filtered: table"))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodygettouchingrigidbodies"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody:GetTouchingRigidBodies()")),(0,d.kt)("p",null,"Returns all RigidBodies that are in collision with the current RigidBody. "),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"parameters - ",(0,d.kt)("inlineCode",{parentName:"li"},"none")),(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"bodies: table"))),(0,d.kt)("hr",null),(0,d.kt)("h2",{id:"events"},"Events"),(0,d.kt)("h3",{id:"rigidbodytouched"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody.Touched")),(0,d.kt)("p",null,"This event is fired the moment a RigidBody collides with another RigidBody. This event returns the unique ID of the other RigidBody."),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"RigidBodyID: number")),(0,d.kt)("li",{parentName:"ul"},"Also Check out:",(0,d.kt)("ul",{parentName:"li"},(0,d.kt)("li",{parentName:"ul"},(0,d.kt)("a",{parentName:"li",href:"https://github.com/jaipack17/Nature2D/tree/master/docs/api/engine#enginegetbodybyid"},(0,d.kt)("inlineCode",{parentName:"a"},"Engine:GetBodyById()")))))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodytouchended"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody.TouchEnded")),(0,d.kt)("p",null,"This event is fired the moment a RigidBody stops colliding with another RigidBody. This event returns the unique ID of the other RigidBody."),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"RigidBodyID: number"))),(0,d.kt)("hr",null),(0,d.kt)("h3",{id:"rigidbodycanvasedgetouched"},(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBody.CanvasEdgeTouched")),(0,d.kt)("p",null,"This event is fired when the RigidBody collides with the engine's canvas' boundary. "),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"returns - ",(0,d.kt)("inlineCode",{parentName:"li"},"edgeName: string"))),(0,d.kt)("hr",null),(0,d.kt)("h2",{id:"properties"},"Properties"),(0,d.kt)("h3",{id:"object-guiobject"},"Object ",(0,d.kt)("inlineCode",{parentName:"h3"},"GuiObject")),(0,d.kt)("p",null,"The UI element of the RigidBody, if any. "),(0,d.kt)("h3",{id:"structure-rigidbodystructure"},"Structure ",(0,d.kt)("inlineCode",{parentName:"h3"},"RigidBodyStructure")),(0,d.kt)("p",null,"The point-constraint structure of the RigidBody, if any."),(0,d.kt)("h3",{id:"mass-number"},"Mass ",(0,d.kt)("inlineCode",{parentName:"h3"},"number")),(0,d.kt)("p",null,"The mass of the RigidBody"),(0,d.kt)("h3",{id:"collidable-boolean"},"Collidable ",(0,d.kt)("inlineCode",{parentName:"h3"},"boolean")),(0,d.kt)("p",null,"Whether or not the RigidBody will collide with other RigidBodies."),(0,d.kt)("h3",{id:"anchored-boolean"},"Anchored ",(0,d.kt)("inlineCode",{parentName:"h3"},"boolean")),(0,d.kt)("p",null,"Whether or not the RigidBody is anchored."),(0,d.kt)("h3",{id:"lifespan-number"},"LifeSpan ",(0,d.kt)("inlineCode",{parentName:"h3"},"number")),(0,d.kt)("p",null,"The amount of time a RigidBody is part of the engine, if any. After this time is elapsed, the RigidBody is destroyed."),(0,d.kt)("h3",{id:"keepincanvas-boolean"},"KeepInCanvas ",(0,d.kt)("inlineCode",{parentName:"h3"},"boolean")),(0,d.kt)("p",null,"Whether or not the RigidBody will be able to go past its confined bounds."),(0,d.kt)("h3",{id:"gravity-vector2"},"Gravity ",(0,d.kt)("inlineCode",{parentName:"h3"},"Vector2")),(0,d.kt)("p",null,"The gravitational force vector for the RigidBody."),(0,d.kt)("h3",{id:"friction-number"},"Friction ",(0,d.kt)("inlineCode",{parentName:"h3"},"number")),(0,d.kt)("p",null,"The damping value for the RigidBody when it is in collisions with the other RigidBodies."),(0,d.kt)("h3",{id:"airfriction-number"},"AirFriction ",(0,d.kt)("inlineCode",{parentName:"h3"},"number")),(0,d.kt)("p",null,"The damping value for the RigidBody when it is ",(0,d.kt)("strong",{parentName:"p"},"not")," in collisions with the other RigidBodies."))}h.isMDXComponent=!0}}]);