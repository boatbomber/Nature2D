"use strict";(self.webpackChunknature_2_d_docs=self.webpackChunknature_2_d_docs||[]).push([[598],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7098:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],s={sidebar_position:5},l="Creating Custom Constraints",c={unversionedId:"tutorial-basics/Custom Constraints",id:"tutorial-basics/Custom Constraints",isDocsHomePage:!1,title:"Creating Custom Constraints",description:"In this example, we create custom constraints, mainly a RigidBody hanging on a rope firmly. We'll also simulate the RigidBody by applying wind forces to it. The final result will look like the following:",source:"@site/docs/tutorial-basics/Custom Constraints.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/Custom Constraints",permalink:"/Nature2D/docs/tutorial-basics/Custom Constraints",editUrl:"https://github.com/jaipack17/Nature2D/edit/master/docs/docs/tutorial-basics/Custom Constraints.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Operations on RigidBodies",permalink:"/Nature2D/docs/tutorial-basics/RigidBody Operations"},next:{title:"Handling Events",permalink:"/Nature2D/docs/tutorial-basics/Handling Events"}},u=[],p={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"creating-custom-constraints"},"Creating Custom Constraints"),(0,a.kt)("p",null,"In this example, we create custom constraints, mainly a RigidBody hanging on a rope firmly. We'll also simulate the RigidBody by applying wind forces to it. The final result will look like the following:"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/74130881/138543444-6978a691-4436-4c48-847a-44b3a44a6e3a.gif",alt:"rope"})),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Firstly, we require the module and initialize the engine. It is important to set a frame for the canvas if we wish to render constraints on screen."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local canvas = path.to.canvasFrame\nlocal Nature2D = require(game:GetService("ReplicatedStorage").Nature2D)\n\nlocal viewport = workspace.CurrentCamera.ViewportSize\n\nlocal Engine = Nature2D.init(path.to.screengui)\nEngine:SetPhysicalProperty("CollisionMultiplier", 0.1)\nEngine:CreateCanvas(Vector2.new(0, 0), viewport, canvas)\n')),(0,a.kt)("p",null,"Next, we choose an anchor point, this is the point the rope hangs on from."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local Anchor = Engine:Create("Point", {\n   Position = Vector2.new(viewport.X/2, 0),\n   Visible = false,\n   Snap = true, -- prevent the point from changing positions\n   KeepInCanvas = false -- or use Anchor:KeepInCanvas(false) instead of the property\n})\n')),(0,a.kt)("p",null,"We then create a RigidBody and connect the anchor and the RigidBody with a constraint."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local RigidBodyFrame = path.to.UIElement\nlocal Body = Engine:Create("RigidBody", {\n   Object = RigidBodyFrame,\n   Collidable = true,\n   Anchored = false\n})\n\nlocal TopLeftCorner = Body:GetVertices()[1]\n\n-- I set the constraint type to be a rope. You can use Rod or Spring as well!\nlocal Rope = Engine:Create("Constraint", {\n   Type = "Rope",\n   Point1 = Anchor,\n   Point2 = TopLeftCorner,\n   Visible = true,\n   Thickness = 3,\n   Color = Color.new(1, 1, 1) -- set constraint color to white (or use Rope:Stroke(Color3.new(1, 1, 1)))\n})\n')),(0,a.kt)("p",null,"We now apply random wind forces to the RigidBody to complete the simulation!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"Engine:Start() -- start the simulation\n\nwhile task.wait() do\n   local random = Random.new()\n   Body:ApplyForce(Vector2.new(random:NextNumber(0, 0.5), 0)) -- apply a random wind force\nend\n")),(0,a.kt)("p",null,"There you go! You now have a simulation with custom constraints. These constraints can also be used to connect multiple RigidBodies with each other as well as to create custom RigidBodies and SoftBodies!"),(0,a.kt)("hr",null))}d.isMDXComponent=!0}}]);