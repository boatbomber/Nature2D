"use strict";(self.webpackChunknature_2_d_docs=self.webpackChunknature_2_d_docs||[]).push([[209],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(r),m=i,y=d["".concat(s,".").concat(m)]||d[m]||p[m]||a;return r?n.createElement(y,o(o({ref:t},u),{},{components:r})):n.createElement(y,o({ref:t},u))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8005:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var n=r(7462),i=r(3366),a=(r(7294),r(3905)),o=["components"],l={sidebar_position:3},s="Custom Physical Properties",c={unversionedId:"tutorial-basics/Custom Physical Properties",id:"tutorial-basics/Custom Physical Properties",isDocsHomePage:!1,title:"Custom Physical Properties",description:"You can easily set universal physical properties which will be adhered by every RigidBody and Constraint!",source:"@site/docs/tutorial-basics/Custom Physical Properties.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/Custom Physical Properties",permalink:"/Nature2D/docs/tutorial-basics/Custom Physical Properties",editUrl:"https://github.com/jaipack17/Nature2D/edit/master/docs/docs/tutorial-basics/Custom Physical Properties.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Creating a Canvas",permalink:"/Nature2D/docs/tutorial-basics/Custom Canvas"},next:{title:"Operations on RigidBodies",permalink:"/Nature2D/docs/tutorial-basics/RigidBody Operations"}},u=[],p={toc:u};function d(e){var t=e.components,r=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"custom-physical-properties"},"Custom Physical Properties"),(0,a.kt)("p",null,"You can easily set universal physical properties which will be adhered by every RigidBody and Constraint!"),(0,a.kt)("p",null,"In order to set universal physical properties, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"Engine:SetPhysicalProperty()")," method!"),(0,a.kt)("p",null,"This method takes in 2 parameters - The property name, which is a string and its new value. Here are the physical properties you can set as of now:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Gravity - Vector2 (By default ",(0,a.kt)("inlineCode",{parentName:"li"},"Vector2.new(0, 0.3)"),")"),(0,a.kt)("li",{parentName:"ul"},"Friction - number (By default ",(0,a.kt)("inlineCode",{parentName:"li"},"0.01"),")"),(0,a.kt)("li",{parentName:"ul"},"AirFriction - number (By default ",(0,a.kt)("inlineCode",{parentName:"li"},"0.01"),")"),(0,a.kt)("li",{parentName:"ul"},"CollisionMultiplier - number (By default ",(0,a.kt)("inlineCode",{parentName:"li"},"0.8"),")")),(0,a.kt)("p",null,"Gravity is a vector, the force is applied every RenderStepped on all rigid bodies. You can simulate 0 gravity or even sideways gravitational force! An example from the previous tutorial:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="ScreenGui/Example.client.lua"',title:'"ScreenGui/Example.client.lua"'},'local ReplicatedStorage = game:GetService("ReplicatedStorage")\nlocal Nature2D = require(ReplicatedStorage:FindFirstChild("Nature2D"))\n\nlocal ScreenGui = script.Parent\nlocal Canvas = ScreenGui.Canvas\n\nlocal engine = Nature2D.init(ScreenGui)\n\nfor _, box in ipairs(Canvas.Boxes:GetChildren()) do\n    engine:Create("RigidBody", { Object = box, Collidable = true, Anchored = false })\nend\nengine:SetPhysicalProperty("Gravity", Vector2.new(.2, 0)) -- sideways\nengine:Start()\n')),(0,a.kt)("iframe",{width:"675",height:"400",src:"https://user-images.githubusercontent.com/74130881/137442621-a7d78cfa-ec2e-4e7c-9993-67db327f4a74.mp4",frameborder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0}),(0,a.kt)("p",null,"Custom friction and airfriction damping value can also be set to increase or decrease friction. The higher the value of friction, the higher it is and vice-versa!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'engine:SetPhysicalProperty("Friction", 0.01) \nengine:SetPhysicalProperty("AirFriction", 0.01) \n')),(0,a.kt)("p",null,"CollisionMultiplier is a multiplier value used to increase or decrease the repulsion force when a RigidBody collides with the ",(0,a.kt)("strong",{parentName:"p"},"boundaries of the canvas"),". "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'engine:SetPhysicalProperty("CollisionMultiplier", 0.1)\n')))}d.isMDXComponent=!0}}]);